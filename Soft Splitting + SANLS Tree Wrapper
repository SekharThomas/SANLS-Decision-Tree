from sklearn.base import BaseEstimator, ClassifierMixin

class SANLSTree(BaseEstimator, ClassifierMixin):
    def __init__(self, criterion='entropy', max_depth=None, n_bootstrap=80):
        self.criterion = criterion
        self.max_depth = max_depth
        self.n_bootstrap = n_bootstrap
        self.tree = None
        self.bootstrap_stability = []

    def fit(self, X, y):
        # Adaptive bootstrapping
        for i in range(self.n_bootstrap):
            indices = np.random.choice(len(X), size=len(X), replace=True)
            X_boot, y_boot = X[indices], y[indices]
            tree = DecisionTreeClassifier(criterion=self.criterion, max_depth=self.max_depth)
            tree.fit(X_boot, y_boot)
            if i == 0:
                self.tree = tree
            # Track number of iterations needed for stable split
            self.bootstrap_stability.append(self._compute_stability(tree))

        return self

    def predict(self, X):
        return self.tree.predict(X)

    def _compute_stability(self, tree):
        # Simplified example: just return number of nodes as "stability"
        return tree.tree_.node_count

